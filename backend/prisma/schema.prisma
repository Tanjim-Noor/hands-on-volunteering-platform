datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  password          String
  name              String?
  skills            String?           // Comma separated or JSON string
  causes            String?           // Comma separated or JSON string
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  // Events created by the user
  volunteerEvents   VolunteerEvent[]
  // Events the user has attended
  attendedEvents    VolunteerEvent[]  @relation("EventAttendees")
  communityRequests CommunityRequest[]
  teams             Team[]            @relation("UserTeams")
  impactLogs        ImpactLog[]
  // Comments authored by the user
  comments          Comment[]         @relation("UserComments")
}

model VolunteerEvent {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  // "date" now captures both date and time
  date        DateTime
  location    String
  category    String
  // The user who created this event
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById Int
  // Users who have attended this event
  attendees   User[]    @relation("EventAttendees")
  // Optional relation to the team organizing the event
  teamId      Int?
  team        Team?     @relation("TeamEvents", fields: [teamId], references: [id])
}

model CommunityRequest {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  urgency     String    // "low", "medium", "urgent"
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById Int
  comments    Comment[]
}

model Comment {
  id         Int              @id @default(autoincrement())
  text       String
  createdAt  DateTime         @default(now())
  // Relation to the user who authored this comment (with relation name "UserComments")
  authorId   Int
  author     User             @relation("UserComments", fields: [authorId], references: [id])
  request    CommunityRequest @relation(fields: [requestId], references: [id])
  requestId  Int
}

model Team {
  id         Int             @id @default(autoincrement())
  name       String
  isPrivate  Boolean         @default(false)
  members    User[]          @relation("UserTeams")
  createdAt  DateTime        @default(now())
  // Volunteer events linked to this team
  events     VolunteerEvent[]  @relation("TeamEvents")
}

model ImpactLog {
  id             Int      @id @default(autoincrement())
  volunteerHours Int
  verified       Boolean  @default(false)
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
}